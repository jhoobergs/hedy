// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type L3StepRes = { type: "normal", data: L3Res } | { type: "step", data: L3DataType | null };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type L2Res = { type: "loaded" } | { type: "nothing_to_do" } | { type: "done" } | { type: "sys_call", sys_call: L2SysCall, } | { type: "runtime_error", error: L2RuntimeError, };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type HedyL2Statement = { type: "print", content: [HedyL2Expression, string | null] } | { type: "expr", content: HedyL2Expression } | { type: "comp", content: Array<HedyL2Statement> } | { type: "color", content: HedyL2Expression } | { type: "forward", content: HedyL2Expression } | { type: "turn", content: HedyL2Expression } | { type: "assign", content: [string, HedyL2Expression] } | { type: "sleep", content: HedyL2Expression };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type L2IPSysCall = { type: "waiting_for_input" } | { type: "writing_output", text: string, } | { type: "turtle_color", color: TurtleColor, } | { type: "turtle_forward", amount: number, } | { type: "turtle_turn_degrees", degrees: number, } | { type: "sleep", seconds: number, };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type L1SysCall = { type: "waiting_for_input" } | { type: "writing_output", text: string, } | { type: "writing_input_question", question: string, } | { type: "turtle_color", color: TurtleColor, } | { type: "turtle_forward", amount: number, } | { type: "turtle_turn", direction: TurtleDirection, };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type RuntimeError = { type: "can_only_add_string_to_list" } | { type: "can_only_add_to_list" } | { type: "can_only_take_from_list" } | { type: "can_only_take_from_non_empty_list" } | { type: "undefined_variable", variable_name: string, } | { type: "concatenation_non_string_to_string" } | { type: "can_only_turn_integer_amount" } | { type: "can_only_move_integer_amount" } | { type: "unsupported_turtle_color", s: string, } | { type: "can_only_use_string_as_color" } | { type: "can_only_print_strings" } | { type: "variable_did_not_evaluate_to_a_string" } | { type: "can_only_ask_strings" } | { type: "can_only_sleep_integer_amount" };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type HedyL3Statement = { type: "print", content: [HedyL3Expression, string | null] } | { type: "expr", content: HedyL3Expression } | { type: "comp", content: Array<HedyL3Statement> } | { type: "color", content: HedyL3Expression } | { type: "forward", content: HedyL3Expression } | { type: "turn", content: HedyL3Expression } | { type: "assign", content: [string, HedyL3Expression] } | { type: "sleep", content: HedyL3Expression };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type HedyL1Statement = { type: "ask", content: string } | { type: "print", content: [HedyL1Expression, string | null] } | { type: "echo", content: [string, string | null] } | { type: "expr", content: HedyL1Expression } | { type: "comp", content: Array<HedyL1Statement> } | { type: "color", content: TurtleColor } | { type: "forward", content: number } | { type: "turn", content: TurtleDirection };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type L2StepRes = { type: "normal", data: L2Res } | { type: "step", data: L1DataType | null };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type L1IPSysCall = { type: "waiting_for_input" } | { type: "writing_output", text: string, } | { type: "turtle_color", color: TurtleColor, } | { type: "turtle_forward", amount: number, } | { type: "turtle_turn", direction: TurtleDirection, };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type HedyL2Expression = { type: "input", content: HedyL2Expression } | { type: "var", content: string } | { type: "string", content: string } | { type: "string_with_var", content: string };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type HedyL1IPExpression = { type: "string", content: string };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type HedyL1IPStatement = { type: "ask", content: [string, string | null] } | { type: "print", content: [HedyL1IPExpression, string | null] } | { type: "echo", content: [string, string | null] } | { type: "expr", content: HedyL1IPExpression } | { type: "comp", content: Array<HedyL1IPStatement> } | { type: "color", content: TurtleColor } | { type: "forward", content: number } | { type: "turn", content: TurtleDirection };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type L1StepRes = { type: "normal", data: L1Res } | { type: "step", data: L1DataType | null };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type L1DataType = { type: "nothing" } | { type: "string", string_value: string, };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type L2RuntimeError = { type: "undefined_variable", variable_name: string, } | { type: "can_only_turn_integer_amount" } | { type: "can_only_move_integer_amount" } | { type: "unsupported_turtle_color", s: string, } | { type: "can_only_use_string_as_color" } | { type: "can_only_print_strings" } | { type: "can_only_ask_strings" } | { type: "variable_did_not_evaluate_to_a_string" } | { type: "can_only_sleep_integer_amount" };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type HedyL2IPStatement = { type: "print", content: [HedyL2IPExpression, string | null] } | { type: "expr", content: HedyL2IPExpression } | { type: "comp", content: Array<HedyL2IPStatement> } | { type: "color", content: HedyL2IPExpression } | { type: "forward", content: HedyL2IPExpression } | { type: "turn", content: HedyL2IPExpression } | { type: "assign", content: [string, HedyL2IPExpression] } | { type: "sleep", content: HedyL2IPExpression };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type TurtleColor = "blue" | "black" | "red" | "white";// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type TurtleDirection = "right" | "left";// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type L1Res = { type: "loaded" } | { type: "nothing_to_do" } | { type: "done" } | { type: "sys_call", sys_call: L1SysCall, } | { type: "runtime_error", error: L1RuntimeError, };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type L3DataType = { type: "nothing" } | { type: "string", string_value: string, } | { type: "list", list: Array<string>, };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type HedyL2IPExpression = { type: "input", content: [HedyL2IPExpression, string | null] } | { type: "var", content: string } | { type: "string", content: string } | { type: "string_with_var", content: string };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type L3Res = { type: "loaded" } | { type: "nothing_to_do" } | { type: "done" } | { type: "sys_call", sys_call: L2SysCall, } | { type: "runtime_error", error: RuntimeError, };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type L2SysCall = { type: "waiting_for_input" } | { type: "writing_output", text: string, } | { type: "writing_input_question", question: string, } | { type: "turtle_color", color: TurtleColor, } | { type: "turtle_forward", amount: number, } | { type: "turtle_turn_degrees", degrees: number, } | { type: "sleep", seconds: number, };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type HedyL3Expression = { type: "input", content: HedyL3Expression } | { type: "var", content: string } | { type: "string", content: string } | { type: "string_or_var", content: string } | { type: "string_concat", content: Array<HedyL3Expression> } | { type: "list", content: Array<string> } | { type: "list_add", content: [HedyL3Expression, HedyL3Expression] } | { type: "list_remove", content: [HedyL3Expression, HedyL3Expression] } | { type: "list_random", content: HedyL3Expression };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type L1RuntimeError = { type: "missing_ask_before_echo" } | { type: "can_only_print_strings" } | { type: "can_only_ask_strings" };// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type HedyL1Expression = { type: "string", content: string };
declare namespace wasm_bindgen {
	/* tslint:disable */
	/* eslint-disable */
	/**
	*/
	export class L1StepExecutor {
	  free(): void;
	/**
	* @param {string} code
	*/
	  constructor(code: string);
	/**
	* @param {string} json
	* @returns {L1StepExecutor}
	*/
	  static from_json(json: string): L1StepExecutor;
	/**
	* @param {string} s
	*/
	  add_input(s: string): void;
	/**
	* @returns {L1StepExecutor}
	*/
	  next(): L1StepExecutor;
	/**
	* @returns {L1StepExecutor}
	*/
	  next_syscall(): L1StepExecutor;
	/**
	*/
	  readonly last_result: any;
	}
	/**
	*/
	export class L2StepExecutor {
	  free(): void;
	/**
	* @param {string} code
	*/
	  constructor(code: string);
	/**
	* @param {string} json
	* @returns {L2StepExecutor}
	*/
	  static from_json(json: string): L2StepExecutor;
	/**
	* @param {string} s
	*/
	  add_input(s: string): void;
	/**
	* @returns {L2StepExecutor}
	*/
	  next(): L2StepExecutor;
	/**
	* @returns {L2StepExecutor}
	*/
	  next_syscall(): L2StepExecutor;
	/**
	*/
	  readonly last_result: any;
	}
	/**
	*/
	export class L3StepExecutor {
	  free(): void;
	/**
	* @param {string} json
	* @returns {L3StepExecutor}
	*/
	  static from_json(json: string): L3StepExecutor;
	/**
	* @param {string} s
	*/
	  add_input(s: string): void;
	/**
	* @returns {L3StepExecutor}
	*/
	  next(): L3StepExecutor;
	/**
	* @returns {L3StepExecutor}
	*/
	  next_syscall(): L3StepExecutor;
	/**
	*/
	  readonly last_result: any;
	}
	
}

declare type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

declare interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly __wbg_l2stepexecutor_free: (a: number) => void;
  readonly l2stepexecutor_new: (a: number, b: number) => number;
  readonly l2stepexecutor_from_json: (a: number, b: number) => number;
  readonly l2stepexecutor_add_input: (a: number, b: number, c: number) => void;
  readonly l2stepexecutor_next: (a: number) => number;
  readonly l2stepexecutor_next_syscall: (a: number) => number;
  readonly l2stepexecutor_last_result: (a: number) => number;
  readonly __wbg_l1stepexecutor_free: (a: number) => void;
  readonly l1stepexecutor_new: (a: number, b: number) => number;
  readonly l1stepexecutor_from_json: (a: number, b: number) => number;
  readonly l1stepexecutor_add_input: (a: number, b: number, c: number) => void;
  readonly l1stepexecutor_next: (a: number) => number;
  readonly l1stepexecutor_next_syscall: (a: number) => number;
  readonly l1stepexecutor_last_result: (a: number) => number;
  readonly __wbg_l3stepexecutor_free: (a: number) => void;
  readonly l3stepexecutor_from_json: (a: number, b: number) => number;
  readonly l3stepexecutor_add_input: (a: number, b: number, c: number) => void;
  readonly l3stepexecutor_next: (a: number) => number;
  readonly l3stepexecutor_next_syscall: (a: number) => number;
  readonly l3stepexecutor_last_result: (a: number) => number;
  readonly __wbindgen_malloc: (a: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number) => number;
  readonly __wbindgen_exn_store: (a: number) => void;
  readonly __wbindgen_free: (a: number, b: number) => void;
}

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {InitInput | Promise<InitInput>} module_or_path
*
* @returns {Promise<InitOutput>}
*/
declare function wasm_bindgen (module_or_path?: InitInput | Promise<InitInput>): Promise<InitOutput>;
